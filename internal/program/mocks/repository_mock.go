// Code generated by MockGen. DO NOT EDIT.
// Source: internal/program/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/csc13010-student-management/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIProgramRepository is a mock of IProgramRepository interface.
type MockIProgramRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProgramRepositoryMockRecorder
}

// MockIProgramRepositoryMockRecorder is the mock recorder for MockIProgramRepository.
type MockIProgramRepositoryMockRecorder struct {
	mock *MockIProgramRepository
}

// NewMockIProgramRepository creates a new mock instance.
func NewMockIProgramRepository(ctrl *gomock.Controller) *MockIProgramRepository {
	mock := &MockIProgramRepository{ctrl: ctrl}
	mock.recorder = &MockIProgramRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProgramRepository) EXPECT() *MockIProgramRepositoryMockRecorder {
	return m.recorder
}

// CreateProgram mocks base method.
func (m *MockIProgramRepository) CreateProgram(ctx context.Context, program *models.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgram", ctx, program)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProgram indicates an expected call of CreateProgram.
func (mr *MockIProgramRepositoryMockRecorder) CreateProgram(ctx, program interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgram", reflect.TypeOf((*MockIProgramRepository)(nil).CreateProgram), ctx, program)
}

// DeleteProgram mocks base method.
func (m *MockIProgramRepository) DeleteProgram(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgram", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgram indicates an expected call of DeleteProgram.
func (mr *MockIProgramRepositoryMockRecorder) DeleteProgram(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgram", reflect.TypeOf((*MockIProgramRepository)(nil).DeleteProgram), ctx, id)
}

// GetPrograms mocks base method.
func (m *MockIProgramRepository) GetPrograms(ctx context.Context) ([]*models.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrograms", ctx)
	ret0, _ := ret[0].([]*models.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrograms indicates an expected call of GetPrograms.
func (mr *MockIProgramRepositoryMockRecorder) GetPrograms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrograms", reflect.TypeOf((*MockIProgramRepository)(nil).GetPrograms), ctx)
}

// UpdateProgram mocks base method.
func (m *MockIProgramRepository) UpdateProgram(ctx context.Context, program *models.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgram", ctx, program)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgram indicates an expected call of UpdateProgram.
func (mr *MockIProgramRepositoryMockRecorder) UpdateProgram(ctx, program interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgram", reflect.TypeOf((*MockIProgramRepository)(nil).UpdateProgram), ctx, program)
}
