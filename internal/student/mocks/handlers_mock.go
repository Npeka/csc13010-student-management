// Code generated by MockGen. DO NOT EDIT.
// Source: internal/student/delivery.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIStudentHandlers is a mock of IStudentHandlers interface.
type MockIStudentHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentHandlersMockRecorder
}

// MockIStudentHandlersMockRecorder is the mock recorder for MockIStudentHandlers.
type MockIStudentHandlersMockRecorder struct {
	mock *MockIStudentHandlers
}

// NewMockIStudentHandlers creates a new mock instance.
func NewMockIStudentHandlers(ctrl *gomock.Controller) *MockIStudentHandlers {
	mock := &MockIStudentHandlers{ctrl: ctrl}
	mock.recorder = &MockIStudentHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentHandlers) EXPECT() *MockIStudentHandlersMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method.
func (m *MockIStudentHandlers) CreateStudent() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockIStudentHandlersMockRecorder) CreateStudent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockIStudentHandlers)(nil).CreateStudent))
}

// DeleteStudent mocks base method.
func (m *MockIStudentHandlers) DeleteStudent() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockIStudentHandlersMockRecorder) DeleteStudent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockIStudentHandlers)(nil).DeleteStudent))
}

// GetOptions mocks base method.
func (m *MockIStudentHandlers) GetOptions() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockIStudentHandlersMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockIStudentHandlers)(nil).GetOptions))
}

// GetStudents mocks base method.
func (m *MockIStudentHandlers) GetStudents() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudents")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetStudents indicates an expected call of GetStudents.
func (mr *MockIStudentHandlersMockRecorder) GetStudents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudents", reflect.TypeOf((*MockIStudentHandlers)(nil).GetStudents))
}

// UpdateStudent mocks base method.
func (m *MockIStudentHandlers) UpdateStudent() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockIStudentHandlersMockRecorder) UpdateStudent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockIStudentHandlers)(nil).UpdateStudent))
}
